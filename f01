*---------------------------------------------------------------------*
* Check status (Final version based on funct logic)
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj           TYPE cuobj,
        lv_value         TYPE atwrt,
        lv_stat          TYPE jest-stat,
        lv_date          TYPE udate,
        lv_time          TYPE utime,
        lv_objid         TYPE c LENGTH 20,
        lv_inact         TYPE jest-inact,
        lv_vornr         TYPE vornr,
        lv_rel_active    TYPE abap_bool VALUE abap_false,
        lv_teco_active   TYPE abap_bool VALUE abap_false,
        lv_cmx_active    TYPE abap_bool VALUE abap_false,
        lv_cmxs_active   TYPE abap_bool VALUE abap_false,
        lv_locked_active TYPE abap_bool VALUE abap_false,
        lv_cmxs_date     TYPE udate,
        lv_cmxs_time     TYPE utime.

  "---------------------------------------------------
  " Classification object (equipment or functional location)
  "---------------------------------------------------
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-tplnr.
  ENDIF.

  IF lv_obj IS INITIAL.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 1: Check REL or TECO active
  "---------------------------------------------------
  SELECT SINGLE stat
    INTO @lv_stat
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat = 'I0002' " REL
     AND inact = ''.
  IF sy-subrc = 0.
    lv_rel_active = abap_true.
  ENDIF.

  SELECT SINGLE stat
    INTO @lv_stat
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat = 'I0045' " TECO
     AND inact = ''.
  IF sy-subrc = 0.
    lv_teco_active = abap_true.
  ENDIF.

  IF lv_rel_active = abap_false AND lv_teco_active = abap_false.
    RETURN. " Skip orders that are not REL or TECO
  ENDIF.

  "---------------------------------------------------
  " Step 2: Check CMXC (Confirmed)
  "---------------------------------------------------
  SELECT SINGLE inact
    INTO @lv_inact
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat  = 'E0010'. " CMXC

  IF sy-subrc = 0 AND lv_inact IS INITIAL.
    lv_cmx_active = abap_true.
  ENDIF.

  " If CMXC active but no TECO → skip (per boss rule)
  IF lv_cmx_active = abap_true AND lv_teco_active = abap_false.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 3: INTERFACE must be CMX
  "---------------------------------------------------
  SELECT SINGLE atwrt
    INTO @lv_value
    FROM ausp
   WHERE objek = @lv_obj
     AND atinn = @gv_atinn.

  IF sy-subrc <> 0 OR lv_value <> 'CMX'.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 4: Detect CMXS (Sent to CMX)
  "---------------------------------------------------
  SELECT SINGLE stat
    INTO @lv_stat
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat  = 'E0014'
     AND inact = ''.

  IF sy-subrc = 0.
    lv_cmxs_active = abap_true.

    CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.
    SELECT MAX( udate ) AS max_date, MAX( utime ) AS max_time
      INTO ( @lv_cmxs_date, @lv_cmxs_time )
      FROM cdhdr
     WHERE objectclas = 'ORDER'
       AND objectid    = @lv_objid.
  ENDIF.

  "---------------------------------------------------
  " Step 5: Get latest ORDER change timestamp
  "---------------------------------------------------
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.
  SELECT MAX( udate ) AS max_date, MAX( utime ) AS max_time
    INTO ( @lv_date, @lv_time )
    FROM cdhdr
   WHERE objectclas = 'ORDER'
     AND objectid    = @lv_objid.

  " Skip only if CMXS exists and no newer change
  IF lv_cmxs_active = abap_true.
    IF ( lv_date IS INITIAL
      OR lv_date < lv_cmxs_date
      OR ( lv_date = lv_cmxs_date AND lv_time <= lv_cmxs_time ) ).
      RETURN. " Already sent to CMX, no newer change
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 6: Check lock status (I0043)
  "---------------------------------------------------
  SELECT SINGLE inact
    INTO @lv_inact
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat  = 'I0043'. " Locked

  IF sy-subrc = 0.
    IF lv_inact IS INITIAL.
      lv_locked_active = abap_true. " Locked active
    ELSE.
      lv_locked_active = abap_false. " Unlocked
    ENDIF.
  ENDIF.

  " Scenario handling per funct:
  "  - Locked + no CMXS → skip
  "  - Locked + CMXS → send (update LKD)
  "  - Unlocked after CMXS → send (update REL)
  IF lv_locked_active = abap_true AND lv_cmxs_active = abap_false.
    RETURN. " Never sent & locked → skip
  ENDIF.

  "---------------------------------------------------
  " Step 7: Get first valid operation
  "---------------------------------------------------
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.

  "---------------------------------------------------
  " Step 8: Prepare output
  "---------------------------------------------------
  IF lv_locked_active = abap_true.
    lv_stat = 'I0043'. " Show as Locked
  ELSEIF lv_teco_active = abap_true.
    lv_stat = 'I0045'. " TECO
  ELSE.
    lv_stat = 'I0002'. " REL
  ENDIF.

  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.