*&---------------------------------------------------------------------*
*& Include          ZIN_CMX_WORKORDER_F01
*&---------------------------------------------------------------------*

*---------------------------------------------------------------------*
* Fetch candidate orders
*---------------------------------------------------------------------*
FORM f_get_orders.
  SELECT SINGLE atinn INTO gv_atinn
    FROM cabn
   WHERE atnam = 'INTERFACE'.
  IF sy-subrc <> 0.
    MESSAGE 'Characteristic INTERFACE not found' TYPE 'E'.
  ENDIF.
  IF so_date-low IS INITIAL OR so_time-low IS INITIAL.
    MESSAGE 'Check from Date and Time are mandatory' TYPE 'E'.
  ENDIF.

  SELECT * FROM viaufkst
    INTO TABLE gt_orders
   WHERE auart = 'YA07'                  "force YA07
     AND auart IN so_auart
     AND iwerk IN so_werks
     AND aufnr IN so_aufnr
     AND equnr IN so_equnr
     AND tplnr IN so_floc.
ENDFORM.

*---------------------------------------------------------------------*
* Check order statuses and eligibility
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj   TYPE cuobj,
        lv_value TYPE atwrt,
        lv_stat  TYPE jest-stat,
        lv_date  TYPE udate,
        lv_time  TYPE utime,
        lv_objid TYPE c LENGTH 20,
        lv_inact TYPE jest-inact,
        lv_vornr TYPE vornr.

  "Classification object
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-tplnr.
  ENDIF.
  IF lv_obj IS INITIAL. RETURN. ENDIF.

  "INTERFACE=CMX?
  SELECT SINGLE atwrt INTO lv_value FROM ausp
   WHERE objek = lv_obj AND atinn = gv_atinn.
  IF sy-subrc <> 0 OR lv_value <> 'CMX'. RETURN. ENDIF.

  "Status check
  SELECT SINGLE stat INTO lv_stat FROM jest
   WHERE objnr = ps_order-objnr
     AND stat IN (c_stat_rel, c_stat_teco, c_stat_lkd)
     AND inact = ''.
  IF sy-subrc <> 0. RETURN. ENDIF.

  "Skip if CMXC
  SELECT SINGLE stat
    INTO lv_stat
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat = c_stat_cmxc
     AND inact = ''.
  IF sy-subrc = 0. RETURN. ENDIF.

  "Lock/Unlock Handling
  SELECT SINGLE stat inact
    INTO (lv_stat, lv_inact)
    FROM jest
    WHERE objnr = ps_order-objnr
    AND stat = c_stat_lkd.

  IF sy-subrc = 0.
    IF lv_inact IS INITIAL.
      lv_stat = c_stat_lkd. "Locked
    ELSE.
      lv_stat = c_stat_rel.
    ENDIF.
  ENDIF.

  "Change check
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.
  SELECT MAX( udate ) MAX( utime )
    INTO (lv_date, lv_time)
    FROM cdhdr
   WHERE objectclas = 'ORDER'
     AND objectid    = lv_objid.

  IF ( lv_date < so_date-low OR
       ( lv_date = so_date-low AND lv_time < so_time-low ) ).
    SELECT SINGLE stat
      INTO @lv_stat
      FROM jest
     WHERE objnr = @ps_order-objnr
       AND stat = @c_stat_cmxs
       AND inact = ''.
    IF sy-subrc = 0. RETURN. ENDIF.
  ENDIF.

  "Get operation
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.

  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.

*---------------------------------------------------------------------*
* Get first operation
*---------------------------------------------------------------------*
FORM f_get_operation USING ps_order TYPE viaufkst
                     CHANGING pv_vornr TYPE afvc-vornr.

  SELECT vornr, aufpl, aplzl, objnr
    FROM afvc
    WHERE aufpl = @ps_order-aufpl
    ORDER BY aplzl
    INTO @DATA(ls_afvc)
    UP TO 1 ROWS.
  ENDSELECT.

  IF sy-subrc = 0.
    pv_vornr = ls_afvc-vornr.
  ENDIF.

  "Skip deleted ops
  IF sy-subrc = 0 AND ls_afvc-objnr IS NOT INITIAL.
    SELECT SINGLE stat
      INTO @DATA(lv_stat)
      FROM jest
      WHERE objnr = @ls_afvc-objnr
      AND stat = 'I0013'
      AND inact = ''.

    IF sy-subrc = 0.
      CLEAR pv_vornr.
    ENDIF.
  ENDIF.
ENDFORM.

*---------------------------------------------------------------------*
* Prepare output
*---------------------------------------------------------------------*
FORM f_prepare_output USING ps_order TYPE viaufkst
                            pv_vornr TYPE vornr
                            pv_stat  TYPE jest-stat.

  CLEAR gs_output.
  gs_output-OrderMessageStatus = 'CREATE'.
  gs_output-Plant   = ps_order-iwerk.
  gs_output-MaintenanceOrder   = ps_order-aufnr.
  gs_output-MaintenanceOrderOperation   = pv_vornr.
  gs_output-MaintOrdBasicStartDate   = ps_order-gstrp.
  gs_output-MaintOrdBasicEndDate   = ps_order-gltrp.
  gs_output-LatestAcceptableComplDate = ps_order-lacd_date.
  gs_output-SystemId = sy-sysid.

  SELECT SINGLE txt04 INTO gs_output-SystemStatusText
    FROM tj02t
   WHERE istat = pv_stat
     AND spras = 'E'.

  IF ps_order-equnr IS NOT INITIAL.
    gs_output-TechnicalObject = ps_order-equnr.
  ELSE.
    gs_output-TechnicalObject = ps_order-tplnr.
  ENDIF.

  APPEND gs_output TO gt_output.

ENDFORM.

*---------------------------------------------------------------------*
* Update SAP status (now using work area, not field-symbols)
*---------------------------------------------------------------------*
FORM f_send_cmx.
  IF p_test = abap_true. "Skip status update
    RETURN.
  ENDIF.
  DATA ls_output LIKE LINE OF gt_output.

  LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<ls_output_row>).

    DATA: lt_header    TYPE TABLE OF bapi_alm_order_headers_i,
          lt_header_up TYPE TABLE OF bapi_alm_order_headers_up,
          lt_status    TYPE TABLE OF bapi_alm_order_usrstat,
          lt_methods   TYPE TABLE OF bapi_alm_order_method,
          ls_header    TYPE bapi_alm_order_headers_i,
          ls_header_up TYPE bapi_alm_order_headers_up,
          ls_status    TYPE bapi_alm_order_usrstat,
          ls_method    TYPE bapi_alm_order_method,
          lt_return    TYPE TABLE OF bapiret2,
          ls_return    TYPE bapiret2,
          lv_objnr     TYPE jest-objnr.

    CLEAR: lt_header, lt_header_up, lt_status, lt_methods, lt_return.

    "---------------------------------------------------
    " Header
    "---------------------------------------------------
    ls_header-orderid = <ls_output_row>-MaintenanceOrder.
    APPEND ls_header TO lt_header.

    CLEAR ls_header_up.
    ls_header_up-orderid    = <ls_output_row>-MaintenanceOrder.
    ls_header_up-short_text = 'X'.       " Tell BAPI to update header
    APPEND ls_header_up TO lt_header_up.

    "---------------------------------------------------
    " User status
    "---------------------------------------------------
    CLEAR ls_status.
    ls_status-user_st_text = 'CMXS'.
    ls_status-langu        = sy-langu.
    ls_status-inactive     = ''.
    ls_status-change_event = '01'.
    ls_status-langu_iso    = 'EN'.
    APPEND ls_status TO lt_status.

    "---------------------------------------------------
    " Methods
    "---------------------------------------------------
    CLEAR ls_method.
    ls_method-refnumber  = '00001'.
    ls_method-objecttype = 'HEADER'.
    ls_method-method     = 'CHANGE'.
    ls_method-objectkey  = <ls_output_row>-MaintenanceOrder.
    APPEND ls_method TO lt_methods.

    CLEAR ls_method.
    ls_method-refnumber  = '00001'.
    ls_method-objecttype = 'USERSTATUS'.
    ls_method-method     = 'CHANGE'.
    ls_method-objectkey  = <ls_output_row>-MaintenanceOrder.
    APPEND ls_method TO lt_methods.

    READ TABLE lt_status INDEX 1 INTO ls_status.
    IF sy-subrc = 0.
      ls_status-change_event = '01'.
      MODIFY lt_status FROM ls_status INDEX 1
      TRANSPORTING change_event.
    ENDIF.

    CLEAR ls_method.
    ls_method-refnumber  = '00003'.
    ls_method-objecttype = 'ORDER'.
    ls_method-method     = 'SAVE'.
    ls_method-objectkey  = <ls_output_row>-MaintenanceOrder.
    APPEND ls_method TO lt_methods.

    "---------------------------------------------------
    " Call BAPI
    "---------------------------------------------------
    CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
      TABLES
        it_header     = lt_header
        it_header_up  = lt_header_up
        it_methods    = lt_methods
        it_userstatus = lt_status
        return        = lt_return
      EXCEPTIONS
        OTHERS        = 1.

    IF sy-subrc <> 0.
      <ls_output_row>-msg = |BAPI call failed (SY-SUBRC={ sy-subrc })|.
    ELSE.
      READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
      IF sy-subrc = 0.
        <ls_output_row>-msg = ls_return-message(72).
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      ELSE.
        <ls_output_row>-msg = 'CMXS status updated successfully'.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
      ENDIF.
    ENDIF.
    " Always log
    PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                               <ls_output_row>-MaintenanceOrderOperation
                               <ls_output_row>-Plant
                               'CMXS'
                               <ls_output_row>-msg.

  ENDLOOP.

  COMMIT WORK.
ENDFORM.

*---------------------------------------------------------------------*
* Display ALV (SALV)
*---------------------------------------------------------------------*
FORM f_display.
  TRY.
      cl_salv_table=>factory(
        IMPORTING r_salv_table = DATA(lo_salv)
        CHANGING  t_table      = gt_output ).

      " Optimize column widths
      lo_salv->get_columns( )->set_optimize( ).

      " Set column headers
      DATA(lo_columns) = lo_salv->get_columns( ).
      DATA lo_column TYPE REF TO cl_salv_column.
      TRY.
          lo_column = lo_columns->get_column( 'ORDERMESSAGESTATUS' ).
          lo_column->set_long_text( 'Order Message Status' ).
          lo_column->set_medium_text( 'Msg Status' ).
          lo_column->set_short_text( 'Status' ).

          lo_column = lo_columns->get_column( 'PLANT' ).
          lo_column->set_long_text( 'Plant' ).

          lo_column = lo_columns->get_column( 'MAINTENANCEORDER' ).
          lo_column->set_long_text( 'Maintenance Order' ).
          lo_column->set_medium_text( 'Order' ).
          lo_column->set_short_text( 'Order' ).

          lo_column = lo_columns->get_column( 'MAINTENANCEORDEROPERATION' ).
          lo_column->set_long_text( 'Operation Number' ).
          lo_column->set_medium_text( 'Operation' ).
          lo_column->set_short_text( 'Op' ).

          lo_column = lo_columns->get_column( 'SYSTEMSTATUSTEXT' ).
          lo_column->set_long_text( 'System Status Text' ).
          lo_column->set_short_text( 'Status' ).

          lo_column = lo_columns->get_column( 'TECHNICALOBJECT' ).
          lo_column->set_long_text( 'Technical Object' ).
          lo_column->set_short_text( 'Object' ).

          lo_column = lo_columns->get_column( 'MAINTORDBASICSTARTDATE' ).
          lo_column->set_long_text( 'Basic Start Date' ).
          lo_column->set_short_text( 'Start' ).

          lo_column = lo_columns->get_column( 'MAINTORDBASICENDDATE' ).
          lo_column->set_long_text( 'Basic End Date' ).
          lo_column->set_short_text( 'End' ).

          lo_column = lo_columns->get_column( 'LATESTACCEPTABLECOMPLDATE' ).
          lo_column->set_long_text( 'Latest Acceptable Completion Date' ).
          lo_column->set_short_text( 'Due Date' ).

          lo_column = lo_columns->get_column( 'SYSTEMID' ).
          lo_column->set_long_text( 'System ID' ).
          lo_column->set_short_text( 'System' ).

          lo_column = lo_columns->get_column( 'MSG' ).
          lo_column->set_long_text( 'Error Message' ).
          lo_column->set_short_text( 'Message' ).
        CATCH cx_salv_not_found.
      ENDTRY.
      " Show standard ALV functions
      lo_salv->get_functions( )->set_all( ).

      " Display ALV
      lo_salv->display( ).
    CATCH cx_salv_msg.
  ENDTRY.
ENDFORM.


*---------------------------------------------------------------------*
* Send JSON payload to CPI (using work area instead of field-symbol)
*---------------------------------------------------------------------*
FORM f_send_to_cpi.
  IF p_test = abap_true.
    RETURN. " Skip CPI call in test mode
  ENDIF.

  DATA: lv_payload  TYPE string,
        lv_content  TYPE string VALUE 'application/json',
        lv_rfc      TYPE rfcdest VALUE 'CMX_WorkOrders',
        lv_status   TYPE i,
        lv_status_c TYPE char10,
        lv_response TYPE string.

  " Build JSON payload (PascalCase)
  TRY.
      lv_payload = xco_ku_json=>data->from_abap( gt_output )->apply( VALUE #(
                        ( xco_ku_json=>transformation->underscore_to_pascal_case )
      ) )->to_string( ).
    CATCH cx_sxml_error INTO DATA(lx_error).
      LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<ls_output_row>).
        <ls_output_row>-msg = |JSON build failed: { lx_error->get_text( ) }|.
        PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                                   <ls_output_row>-MaintenanceOrderOperation
                                   <ls_output_row>-Plant
                                   'CMXS'
                                   <ls_output_row>-Msg.
      ENDLOOP.
      RETURN.
  ENDTRY.

  " HTTP client from destination
  cl_http_client=>create_by_destination(
    EXPORTING destination = lv_rfc
    IMPORTING client      = DATA(lo_http_client)
    EXCEPTIONS OTHERS     = 1 ).
  IF sy-subrc <> 0 OR lo_http_client IS INITIAL.
    LOOP AT gt_output ASSIGNING <ls_output_row>.
      <ls_output_row>-msg = 'HTTP client creation failed'.
      PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                                 <ls_output_row>-MaintenanceOrderOperation
                                 <ls_output_row>-Plant
                                 'CMXS'
                                 <ls_output_row>-Msg.
    ENDLOOP.
    RETURN.
  ENDIF.

  " HTTP headers
  lo_http_client->request->set_header_field( name = '~request_method' value = 'POST' ).
  lo_http_client->request->set_header_field( name = 'Content-Type'    value = lv_content ).

  " Payload
  lo_http_client->request->set_cdata( lv_payload ).

  " Send + receive
  TRY.
      lo_http_client->send( ).
      lo_http_client->receive( ).
    CATCH cx_root INTO DATA(lx_comm_error).
      LOOP AT gt_output ASSIGNING <ls_output_row>.
        <ls_output_row>-msg = |HTTP error: { lx_comm_error->get_text( ) }|.
        PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                                   <ls_output_row>-MaintenanceOrderOperation
                                   <ls_output_row>-Plant
                                   'CMXS'
                                   <ls_output_row>-Msg.
      ENDLOOP.
      RETURN.
  ENDTRY.

  " Status + response
  lo_http_client->response->get_status( IMPORTING code = lv_status ).
  WRITE lv_status TO lv_status_c.
  lv_response = lo_http_client->response->get_cdata( ).

  " Log
  LOOP AT gt_output ASSIGNING <ls_output_row>.
    IF lv_status = 200.
      <ls_output_row>-msg = 'CPI success'.
    ELSE.
      <ls_output_row>-msg = |CPI error { lv_status_c }: { lv_response }|.
    ENDIF.
    PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                               <ls_output_row>-MaintenanceOrderOperation
                               <ls_output_row>-Plant
                               'CMXS'
                               <ls_output_row>-Msg.
  ENDLOOP.

  COMMIT WORK.
ENDFORM.

*---------------------------------------------------------------------*
* Write entry to ZCMX_RUN_LOG
*---------------------------------------------------------------------*
FORM f_write_log USING    pv_aufnr   TYPE aufnr
                          pv_vornr   TYPE vornr
                          pv_werks   TYPE werks_d
                          pv_stat    TYPE char20
                          pv_msg     TYPE char72.

  DATA: ls_log TYPE zcmx_run_log.

  CLEAR ls_log.
  CONCATENATE sy-datum sy-uzeit sy-uname INTO ls_log-logid.
  ls_log-mandt      = sy-mandt.
  ls_log-aufnr      = pv_aufnr.
  ls_log-vornr      = pv_vornr.
  ls_log-werks      = pv_werks.
  ls_log-stat       = pv_stat.
  ls_log-system_id  = sy-sysid.
  ls_log-run_date   = sy-datum.
  ls_log-run_time   = sy-uzeit.
  ls_log-msg        = pv_msg.
  ls_log-created_by = sy-uname.

  INSERT zcmx_run_log FROM ls_log.
ENDFORM.
