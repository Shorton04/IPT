*---------------------------------------------------------------------*
* Check eligibility and determine if order should be sent
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj   TYPE cuobj,
        lv_value TYPE atwrt,
        lv_stat  TYPE jest-stat,
        lv_date  TYPE udate,
        lv_time  TYPE utime,
        lv_objid TYPE c LENGTH 20,
        lv_inact TYPE jest-inact,
        lv_vornr TYPE vornr,
        lv_teco_found TYPE abap_bool VALUE abap_false,
        lv_cmxs_active TYPE abap_bool VALUE abap_false.

  "---------------------------------------------------
  " Step 1: Classification object (equipment or FLoc)
  "---------------------------------------------------
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-tplnr.
  ENDIF.
  IF lv_obj IS INITIAL.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 2: Must be Released or TECO
  "---------------------------------------------------
  SELECT SINGLE stat
    INTO lv_stat
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat IN ('I0002', 'I0045') " REL, TECO
     AND inact = ''.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 3: CMXC (E0010) handling
  "---------------------------------------------------
  SELECT SINGLE inact
    INTO lv_inact
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat  = 'E0010'. " CMXC confirmed

  IF sy-subrc = 0 AND lv_inact IS INITIAL.
    " CMXC active but TECO not yet -> skip
    SELECT SINGLE stat INTO lv_stat
      FROM jest
      WHERE objnr = ps_order-objnr
        AND stat  = 'I0045'
        AND inact = ''.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 4: INTERFACE must be CMX
  "---------------------------------------------------
  SELECT SINGLE atwrt
    INTO lv_value
    FROM ausp
   WHERE objek = lv_obj
     AND atinn = gv_atinn.
  IF sy-subrc <> 0 OR lv_value <> 'CMX'.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 5: Change detection (CDHDR + CMXS check)
  "---------------------------------------------------
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.

  SELECT MAX( udate ) AS udate, MAX( utime ) AS utime
    INTO (lv_date, lv_time)
    FROM cdhdr
   WHERE objectclas = 'ORDER'
     AND objectid    = lv_objid.

  " Already sent?
  SELECT SINGLE stat
    INTO @DATA(lv_stat_cmxs)
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat  = 'E0014'
     AND inact = ''.
  IF sy-subrc = 0.
    lv_cmxs_active = abap_true.
  ENDIF.

  " Skip if already CMXS and no recent changes
  IF lv_cmxs_active = abap_true AND
     ( lv_date < so_date-low OR
       ( lv_date = so_date-low AND lv_time < so_time-low ) ).
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 6: Lock/Unlock Handling (I0043)
  "---------------------------------------------------
  SELECT SINGLE inact
    INTO lv_inact
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat  = 'I0043'. " Locked
  IF sy-subrc = 0.
    IF lv_inact IS INITIAL.
      lv_stat = 'I0043'. " Locked
    ELSE.
      lv_stat = 'I0002'. " Unlocked -> treat as Released
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 7: Get first valid operation
  "---------------------------------------------------
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.

  "---------------------------------------------------
  " Step 8: Prepare output for further processing
  "---------------------------------------------------
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.








*---------------------------------------------------------------------*
* Prepare output row for eligible orders (to be sent)
*---------------------------------------------------------------------*
FORM f_prepare_output USING ps_order TYPE viaufkst
                            pv_vornr TYPE vornr
                            pv_stat  TYPE jest-stat.

  CLEAR gs_output.

  gs_output-OrderMessageStatus        = 'CREATE'.
  gs_output-Plant                     = ps_order-iwerk.
  gs_output-MaintenanceOrder          = ps_order-aufnr.
  gs_output-MaintenanceOrderOperation = pv_vornr.
  gs_output-MaintOrdBasicStartDate    = ps_order-gstrp.
  gs_output-MaintOrdBasicEndDate      = ps_order-gltrp.
  gs_output-LatestAcceptableComplDate = ps_order-lacd_date.
  gs_output-SystemId                  = sy-sysid.

  "---------------------------------------------------
  " Determine final system status text
  "---------------------------------------------------
  DATA(lv_teco_active) = abap_false.
  DATA(lv_cmx_active)  = abap_false.

  " Check if TECO active
  SELECT SINGLE stat
    INTO @DATA(lv_teco_stat)
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat  = 'I0045'
     AND inact = ''.
  IF sy-subrc = 0.
    lv_teco_active = abap_true.
  ENDIF.

  " Check if CMXC active
  SELECT SINGLE stat
    INTO @DATA(lv_cmx_stat)
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat  = 'E0010'
     AND inact = ''.
  IF sy-subrc = 0.
    lv_cmx_active = abap_true.
  ENDIF.

  " Determine final display text
  IF lv_teco_active = abap_true AND lv_cmx_active = abap_true.
    gs_output-SystemStatusText = 'TECO'.
  ELSE.
    SELECT SINGLE txt04
      INTO gs_output-SystemStatusText
      FROM tj02t
     WHERE istat = pv_stat
       AND spras = 'E'.
  ENDIF.

  " Technical object
  IF ps_order-equnr IS NOT INITIAL.
    gs_output-TechnicalObject = ps_order-equnr.
  ELSE.
    gs_output-TechnicalObject = ps_order-tplnr.
  ENDIF.

  APPEND gs_output TO gt_output.

ENDFORM.











*---------------------------------------------------------------------*
* Update SAP status and control sending logic (CMXS + Lock/Unlock)
*---------------------------------------------------------------------*
FORM f_send_cmx.

  DATA lv_mode TYPE char10.

  IF p_test = abap_true.
    lv_mode = 'TEST'.
  ELSE.
    lv_mode = 'LIVE'.
  ENDIF.

  LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<ls_output_row>).

    "---------------------------------------------------
    " Determine if CMXS already exists
    "---------------------------------------------------
    DATA(lv_cmxs_exists) = abap_false.
    SELECT SINGLE stat
      FROM jest
      INTO @DATA(lv_stat_cmxs)
      WHERE objnr = @<ls_output_row>-MaintenanceOrder
        AND stat  = 'E0014'
        AND inact = ''.
    IF sy-subrc = 0.
      lv_cmxs_exists = abap_true.
    ENDIF.

    "---------------------------------------------------
    " Skip TECO orders (never resend)
    "---------------------------------------------------
    IF <ls_output_row>-SystemStatusText = 'TECO'.
      <ls_output_row>-msg = |Skipped: TECO order { <ls_output_row>-MaintenanceOrder }|.
      PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                                 <ls_output_row>-MaintenanceOrderOperation
                                 <ls_output_row>-Plant
                                 'CMXS'
                                 <ls_output_row>-msg.
      CONTINUE.
    ENDIF.

    "---------------------------------------------------
    " Handle Locked/Unlocked logic
    "---------------------------------------------------
    IF <ls_output_row>-SystemStatusText = 'LOCKED' AND lv_cmxs_exists = abap_false.
      " Locked but never sent before → skip
      <ls_output_row>-msg = |Skipped: Locked order not yet sent to CMX ({ <ls_output_row>-MaintenanceOrder })|.
      PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                                 <ls_output_row>-MaintenanceOrderOperation
                                 <ls_output_row>-Plant
                                 'CMXS'
                                 <ls_output_row>-msg.
      CONTINUE.
    ENDIF.

    IF lv_cmxs_exists = abap_true AND
       <ls_output_row>-SystemStatusText = 'LOCKED'.
      <ls_output_row>-msg = |Sent to CMX (Locked) - { <ls_output_row>-MaintenanceOrder }|.
      CONTINUE.
    ENDIF.

    IF lv_cmxs_exists = abap_true AND
       <ls_output_row>-SystemStatusText = 'REL'.
      <ls_output_row>-msg = |Sent to CMX (Unlocked) - { <ls_output_row>-MaintenanceOrder }|.
      CONTINUE.
    ENDIF.

    "---------------------------------------------------
    " TEST mode → simulate send
    "---------------------------------------------------
    IF lv_mode = 'TEST'.
      <ls_output_row>-msg = |[Test Mode] Would send CMXS to CPI for order { <ls_output_row>-MaintenanceOrder }|.
      PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                                 <ls_output_row>-MaintenanceOrderOperation
                                 <ls_output_row>-Plant
                                 'CMXS'
                                 <ls_output_row>-msg.
      CONTINUE.
    ENDIF.

    "---------------------------------------------------
    " LIVE mode → perform actual CMXS update if not yet sent
    "---------------------------------------------------
    IF lv_cmxs_exists = abap_false.
      DATA: lt_header  TYPE TABLE OF bapi_alm_order_headers_i,
            lt_status  TYPE TABLE OF bapi_alm_order_usrstat,
            lt_methods TYPE TABLE OF bapi_alm_order_method,
            lt_return  TYPE TABLE OF bapiret2,
            ls_return  TYPE bapiret2.

      CLEAR: lt_header, lt_status, lt_methods, lt_return.

      APPEND VALUE #( orderid = <ls_output_row>-MaintenanceOrder ) TO lt_header.
      APPEND VALUE #( user_st_text = 'CMXS' langu = sy-langu ) TO lt_status.

      APPEND VALUE #( refnumber = '00001'
                      objecttype = 'HEADER'
                      method = 'CHANGE'
                      objectkey = <ls_output_row>-MaintenanceOrder ) TO lt_methods.
      APPEND VALUE #( refnumber = '00001'
                      objecttype = 'USERSTATUS'
                      method = 'CHANGE'
                      objectkey = <ls_output_row>-MaintenanceOrder ) TO lt_methods.
      APPEND VALUE #( refnumber = '00003'
                      objecttype = 'ORDER'
                      method = 'SAVE'
                      objectkey = <ls_output_row>-MaintenanceOrder ) TO lt_methods.

      CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
        TABLES
          it_header     = lt_header
          it_methods    = lt_methods
          it_userstatus = lt_status
          return        = lt_return.

      READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
      IF sy-subrc = 0.
        <ls_output_row>-msg = ls_return-message(72).
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      ELSE.
        <ls_output_row>-msg = |Sent to CMX (CMXS set) - { <ls_output_row>-MaintenanceOrder }|.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
      ENDIF.

      PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                                 <ls_output_row>-MaintenanceOrderOperation
                                 <ls_output_row>-Plant
                                 'CMXS'
                                 <ls_output_row>-msg.
    ENDIF.

  ENDLOOP.

  COMMIT WORK.

ENDFORM.