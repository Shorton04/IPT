*---------------------------------------------------------------------*
* Fetch candidate orders
*---------------------------------------------------------------------*
FORM f_get_orders.

  SELECT SINGLE atinn
    INTO @gv_atinn
    FROM cabn
    WHERE atnam = 'INTERFACE'.

  IF sy-subrc <> 0.
    MESSAGE 'Characteristic INTERFACE not found' TYPE 'E'.
  ENDIF.

  IF so_date-low IS INITIAL OR so_time-low IS INITIAL.
    MESSAGE 'Check from Date and Time are mandatory' TYPE 'E'.
  ENDIF.

  " Eligible orders (per spec: IDAT1 not blank OR IDAT2 >= check date)
  SELECT *
    FROM viaufkst
    WHERE auart IN @so_auart
      AND iwerk IN @so_werks
      AND aufnr IN @so_aufnr
      AND ( idat1 IS NOT INITIAL OR idat2 >= @so_date-low )
    INTO TABLE @gt_orders.

ENDFORM.

*---------------------------------------------------------------------*
* Prefetch related master data (for performance)
*---------------------------------------------------------------------*
FORM f_prefetch_data.

  IF gt_orders IS INITIAL.
    RETURN.
  ENDIF.

  DATA: lt_objek     TYPE TABLE OF inob-objek,
        lt_objnr     TYPE TABLE OF jest-objnr,
        lt_objectid  TYPE TABLE OF cdhdr-objectid,
        lt_cuobj     TYPE TABLE OF inob-cuobj,
        lv_objid     TYPE cdhdr-objectid.

  " Build key lists for prefetching
  LOOP AT gt_orders INTO DATA(ls_order).

    IF ls_order-equnr IS NOT INITIAL.
      APPEND ls_order-equnr TO lt_objek.
    ENDIF.

    IF ls_order-tplnr IS NOT INITIAL.
      APPEND ls_order-tplnr TO lt_objek.
    ENDIF.

    APPEND ls_order-objnr TO lt_objnr.

    CONCATENATE sy-mandt '30' ls_order-aufnr INTO lv_objid.
    APPEND lv_objid TO lt_objectid.

  ENDLOOP.

  " Remove duplicates
  SORT lt_objek.     DELETE ADJACENT DUPLICATES FROM lt_objek.
  SORT lt_objnr.     DELETE ADJACENT DUPLICATES FROM lt_objnr.
  SORT lt_objectid.  DELETE ADJACENT DUPLICATES FROM lt_objectid.

  " --- JEST (Statuses)
  IF lt_objnr IS NOT INITIAL.
    SELECT objnr, stat, inact
      FROM jest
      INTO TABLE @gt_jest
      WHERE objnr IN @lt_objnr.
  ENDIF.

  " --- INOB (Classification linkages)
  IF lt_objek IS NOT INITIAL.
    SELECT objek, cuobj
      FROM inob
      INTO TABLE @gt_inob
      WHERE objek IN @lt_objek.
  ENDIF.

  " --- AUSP (Characteristics)
  IF gt_inob IS NOT INITIAL.
    LOOP AT gt_inob INTO DATA(ls_inob).
      APPEND ls_inob-cuobj TO lt_cuobj.
    ENDLOOP.
    SORT lt_cuobj. DELETE ADJACENT DUPLICATES FROM lt_cuobj.

    IF lt_cuobj IS NOT INITIAL.
      SELECT objek, atinn, atwrt
        FROM ausp
        INTO TABLE @gt_ausp
        WHERE objek IN @lt_cuobj.
    ENDIF.
  ENDIF.

  " --- CDHDR (Change documents)
  IF lt_objectid IS NOT INITIAL.
    SELECT objectid, udate, utime
      FROM cdhdr
      INTO TABLE @gt_cdhdr
      WHERE objectclas = 'ORDER'
        AND objectid IN @lt_objectid.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Process fetched orders
*---------------------------------------------------------------------*
FORM f_process_orders.

  LOOP AT gt_orders INTO gs_order.
    PERFORM f_check_status USING gs_order.
  ENDLOOP.

ENDFORM.

*---------------------------------------------------------------------*
* Check order statuses and eligibility
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj   TYPE cuobj,
        lv_value TYPE atwrt,
        lv_stat  TYPE jest-stat,
        lv_date  TYPE udate,
        lv_time  TYPE utime,
        lv_vornr TYPE vornr,
        lv_objid TYPE cdhdr-objectid.

  "---------------------------------------------------
  " Step 1: Get classification object (EQUIP or FL)
  "---------------------------------------------------
  READ TABLE gt_inob INTO gs_inob WITH KEY objek = ps_order-equnr.
  IF sy-subrc <> 0.
    READ TABLE gt_inob INTO gs_inob WITH KEY objek = ps_order-tplnr.
  ENDIF.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.
  lv_obj = gs_inob-cuobj.

  "---------------------------------------------------
  " Step 2: Check REL or TECO
  "---------------------------------------------------
  READ TABLE gt_jest INTO gs_jest
       WITH KEY objnr = ps_order-objnr stat = 'I0002' inact = ''.
  IF sy-subrc <> 0.
    READ TABLE gt_jest INTO gs_jest
         WITH KEY objnr = ps_order-objnr stat = 'I0045' inact = ''.
  ENDIF.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.
  lv_stat = gs_jest-stat.

  "---------------------------------------------------
  " Step 3: Skip if CMXC (E0010) active
  "---------------------------------------------------
  READ TABLE gt_jest INTO gs_jest
       WITH KEY objnr = ps_order-objnr stat = 'E0010' inact = ''.
  IF sy-subrc = 0.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 4: INTERFACE must be CMX
  "---------------------------------------------------
  READ TABLE gt_ausp INTO gs_ausp
       WITH KEY objek = lv_obj atinn = gv_atinn.
  IF sy-subrc <> 0 OR gs_ausp-atwrt <> 'CMX'.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 5: Change detection (CDHDR + CMXS logic)
  "---------------------------------------------------
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.
  READ TABLE gt_cdhdr INTO gs_cdhdr WITH KEY objectid = lv_objid BINARY SEARCH.
  IF sy-subrc = 0.
    lv_date = gs_cdhdr-udate.
    lv_time = gs_cdhdr-utime.
  ELSE.
    CLEAR: lv_date, lv_time.
  ENDIF.

  IF ( lv_date < so_date-low OR ( lv_date = so_date-low AND lv_time < so_time-low ) ).
    READ TABLE gt_jest INTO gs_jest
         WITH KEY objnr = ps_order-objnr stat = 'E0014' inact = ''.
    IF sy-subrc = 0.
      RETURN.
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 6: Lock handling (I0043)
  "---------------------------------------------------
  READ TABLE gt_jest INTO gs_jest
       WITH KEY objnr = ps_order-objnr stat = 'I0043'.
  IF sy-subrc = 0 AND gs_jest-inact IS INITIAL.
    lv_stat = 'I0043'.
  ENDIF.

  "---------------------------------------------------
  " Step 7: Get first valid operation
  "---------------------------------------------------
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.

  "---------------------------------------------------
  " Step 8: Prepare output record
  "---------------------------------------------------
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.