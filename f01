*———————————————————————*

- Check status - FIXED VERSION
  *———————————————————————*
  FORM f_check_status USING ps_order TYPE viaufkst.
  
  DATA: lv_obj           TYPE cuobj,
  lv_value         TYPE atwrt,
  lv_stat          TYPE jest-stat,
  lv_vornr         TYPE vornr,
  lv_objid         TYPE c LENGTH 20,
  lv_rel_active    TYPE abap_bool VALUE abap_false,
  lv_teco_active   TYPE abap_bool VALUE abap_false,
  lv_locked_active TYPE abap_bool VALUE abap_false,
  lv_cmxs_active   TYPE abap_bool VALUE abap_false,
  lv_prev_locked   TYPE abap_bool VALUE abap_false,
  lv_sts_date      TYPE udate,
  lv_sts_time      TYPE utime,
  lv_chg_date      TYPE udate,
  lv_chg_time      TYPE utime,
  lv_input_ts      TYPE char14,
  lv_jcds_ts       TYPE char14,
  lv_cdhdr_ts      TYPE char14.
  
  “—————————————————
  “ ⭐ CRITICAL FIX: Check for duplicate at the very start
  “ Use BINARY SEARCH for better performance
  “—————————————————
  READ TABLE gt_output TRANSPORTING NO FIELDS
  WITH KEY MaintenanceOrder = ps_order-aufnr
  BINARY SEARCH.
  IF sy-subrc = 0.
  RETURN.  “ Already processed this order
  ENDIF.
  
  “—————————————————
  “ Classification (INTERFACE = CMX)
  “—————————————————
  CLEAR lv_obj.
  IF ps_order-equnr IS NOT INITIAL.
  SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-equnr.
  ENDIF.
  IF lv_obj IS INITIAL AND ps_order-tplnr IS NOT INITIAL.
  SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-tplnr.
  ENDIF.
  IF lv_obj IS INITIAL.
  RETURN.
  ENDIF.
  
  SELECT SINGLE atwrt INTO @lv_value
  FROM ausp
  WHERE objek = @lv_obj AND atinn = @gv_atinn.
  IF sy-subrc <> 0 OR lv_value <> ‘CMX’.
  RETURN.
  ENDIF.
  
  “—————————————————
  “ Detect current active statuses
  “—————————————————
  SELECT SINGLE stat FROM jest INTO @lv_stat
  WHERE objnr = @ps_order-objnr AND stat = ‘I0002’ AND inact = ‘’.
  IF sy-subrc = 0. lv_rel_active = abap_true. ENDIF.
  
  SELECT SINGLE stat FROM jest INTO @lv_stat
  WHERE objnr = @ps_order-objnr AND stat = ‘I0045’ AND inact = ‘’.
  IF sy-subrc = 0. lv_teco_active = abap_true. ENDIF.
  
  SELECT SINGLE stat FROM jest INTO @lv_stat
  WHERE objnr = @ps_order-objnr AND stat = ‘I0043’ AND inact = ‘’.
  IF sy-subrc = 0. lv_locked_active = abap_true. ENDIF.
  
  SELECT SINGLE stat FROM jest INTO @lv_stat
  WHERE objnr = @ps_order-objnr AND stat = ‘E0010’ AND inact = ‘’.
  IF sy-subrc = 0. lv_cmxs_active = abap_true. ENDIF.
  
  “—————————————————
  “ Check if order was previously locked
  “—————————————————
  SELECT SINGLE * FROM jcds
  WHERE objnr = @ps_order-objnr
  AND stat  = ‘I0043’
  AND inact = ‘X’
  INTO @DATA(ls_prev_lkd).
  IF sy-subrc = 0.
  lv_prev_locked = abap_true.
  ENDIF.
  
  “—————————————————
  “ Date-Time Range filtering
  “—————————————————
  CONCATENATE so_date-low so_time-low INTO lv_input_ts.
  CONCATENATE sy-mandt ‘30’ ps_order-aufnr INTO lv_objid.
  
  SELECT MAX( udate ) AS max_date, MAX( utime ) AS max_time
  INTO ( @lv_sts_date, @lv_sts_time )
  FROM jcds
  WHERE objnr = @ps_order-objnr
  AND stat IN ( ‘I0043’, ‘I0045’, ‘I0002’ )
  AND ( ( udate > @so_date-low )
  OR ( udate = @so_date-low AND utime > @so_time-low ) ).
  
  IF sy-subrc = 0 AND lv_sts_date IS NOT INITIAL.
  CONCATENATE lv_sts_date lv_sts_time INTO lv_jcds_ts.
  ENDIF.
  
  SELECT MAX( udate ) AS max_date, MAX( utime ) AS max_time
  INTO ( @lv_chg_date, @lv_chg_time )
  FROM cdhdr
  WHERE objectclas = ‘ORDER’
  AND objectid   = @lv_objid
  AND ( ( udate > @so_date-low )
  OR ( udate = @so_date-low AND utime > @so_time-low ) ).
  
  IF sy-subrc = 0 AND lv_chg_date IS NOT INITIAL.
  CONCATENATE lv_chg_date lv_chg_time INTO lv_cdhdr_ts.
  ENDIF.
  
  IF lv_jcds_ts IS INITIAL AND lv_cdhdr_ts IS INITIAL.
  RETURN.
  ENDIF.
  
  “—————————————————
  “ Get operation
  “—————————————————
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.
  
  “—————————————————
  “ Decision logic for actions
  “—————————————————
  
  “ 1. Locked → skip both
  IF lv_locked_active = abap_true.
  lv_stat = ‘I0043’.
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.
  gs_output-msg = ‘Locked – skip BAPI and CMX’.
  APPEND gs_output TO gt_output.
  “ ⭐ Sort after append for binary search
  SORT gt_output BY MaintenanceOrder.
  RETURN.
  ENDIF.
  
  “ 2. TECO → skip BAPI, send to CMX
  IF lv_teco_active = abap_true.
  lv_stat = ‘I0045’.
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.
  gs_output-msg = ‘TECO – send to CMX only (skip BAPI)’.
  APPEND gs_output TO gt_output.
  “ ⭐ Sort after append for binary search
  SORT gt_output BY MaintenanceOrder.
  RETURN.
  ENDIF.
  
  “ 3. REL → depends on unlock + CMXS
  IF lv_rel_active = abap_true.
  lv_stat = ‘I0002’.
  
  IF lv_prev_locked = abap_true. “ recently unlocked
  IF lv_cmxs_active = abap_true.
  gs_output-msg = ‘Unlocked REL with CMXS – send to CMX only’.
  ELSE.
  gs_output-msg = ‘Unlocked REL without CMXS – send to BAPI and CMX’.
  ENDIF.
  
  ELSE. “ normal REL
  IF lv_cmxs_active = abap_true.
  gs_output-msg = ‘REL with CMXS – send to CMX only’.
  ELSE.
  gs_output-msg = ‘REL – send to BAPI and CMX’.
  ENDIF.
  ENDIF.
  
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.
  APPEND gs_output TO gt_output.
  “ ⭐ Sort after append for binary search
  SORT gt_output BY MaintenanceOrder.
  ENDIF.

ENDFORM.

*———————————————————————*

- Prepare output - FIXED VERSION
  *———————————————————————*
  FORM f_prepare_output USING ps_order TYPE viaufkst
  pv_vornr TYPE vornr
  pv_stat  TYPE jest-stat.
  
  CLEAR gs_output.
  
  gs_output-OrderMessageStatus        = ‘CREATE’.
  gs_output-Plant                     = ps_order-iwerk.
  gs_output-MaintenanceOrder          = ps_order-aufnr.
  gs_output-MaintenanceOrderOperation = pv_vornr.
  gs_output-MaintOrdBasicStartDate    = ps_order-gstrp.
  gs_output-MaintOrdBasicEndDate      = ps_order-gltrp.
  gs_output-LatestAcceptableComplDate = ps_order-lacd_date.
  gs_output-SystemId                  = sy-sysid.
  
  “—————————————————
  “ Determine final system status text
  “—————————————————
  DATA(lv_teco_active) = abap_false.
  DATA(lv_cmx_active)  = abap_false.
  
  “ Check if TECO active
  SELECT SINGLE stat
  INTO @DATA(lv_teco_stat)
  FROM jest
  WHERE objnr = @ps_order-objnr
  AND stat  = ‘I0045’
  AND inact = ‘’.
  IF sy-subrc = 0.
  lv_teco_active = abap_true.
  ENDIF.
  
  “ Check if CMXC (Confirmed) active
  SELECT SINGLE stat
  INTO @DATA(lv_cmx_stat)
  FROM jest
  WHERE objnr = @ps_order-objnr
  AND stat  = ‘E0010’
  AND inact = ‘’.
  IF sy-subrc = 0.
  lv_cmx_active = abap_true.
  ENDIF.
  
  “—————————————————
  “ Determine final display text
  “—————————————————
  IF lv_teco_active = abap_true.
  SELECT SINGLE txt04
  INTO gs_output-SystemStatusText
  FROM tj02t
  WHERE istat = ‘I0045’
  AND spras = ‘E’.
  ELSE.
  SELECT SINGLE txt04
  INTO gs_output-SystemStatusText
  FROM tj02t
  WHERE istat = pv_stat
  AND spras = ‘E’.
  ENDIF.
  
  “—————————————————
  “ Technical object
  “—————————————————
  IF ps_order-equnr IS NOT INITIAL.
  gs_output-TechnicalObject = ps_order-equnr.
  ELSE.
  gs_output-TechnicalObject = ps_order-tplnr.
  ENDIF.
  
  “ ⭐ REMOVED: Duplicate check here - it’s now at the START of f_check_status

ENDFORM.