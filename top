*---------------------------------------------------------------------*
* Check order statuses and eligibility (updated with REL/TECO logic)
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj   TYPE cuobj,
        lv_value TYPE atwrt,
        lv_stat  TYPE jest-stat,
        lv_date  TYPE udate,
        lv_time  TYPE utime,
        lv_objid TYPE c LENGTH 20,
        lv_inact TYPE jest-inact,
        lv_vornr TYPE vornr.

  "---------------------------------------------------
  " Classification object (equipment or functional location)
  "---------------------------------------------------
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-tplnr.
  ENDIF.
  IF lv_obj IS INITIAL.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 4.1: Status check (REL or TECO required)
  "---------------------------------------------------
  SELECT SINGLE stat
    INTO lv_stat
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat IN ('I0002', 'I0045') " REL, TECO
     AND inact = ''.
  IF sy-subrc <> 0.
    RETURN. " Not valid (no REL/TECO)
  ENDIF.

  "---------------------------------------------------
  " Step 4.2/4.3: CMXC (E0010) handling per boss rule
  "---------------------------------------------------
  SELECT SINGLE inact
    INTO lv_inact
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat  = 'E0010'. " CMXC confirmed

  IF sy-subrc = 0 AND lv_inact IS INITIAL.
    " CMXC active â†’ check if TECO exists
    DATA(lv_teco_found) = abap_false.

    SELECT SINGLE stat
      FROM jest
      INTO lv_stat
      WHERE objnr = ps_order-objnr
        AND stat  = 'I0045' " TECO
        AND inact = ''.

    IF sy-subrc = 0.
      lv_teco_found = abap_true.
    ENDIF.

    " Skip only if CMXC active and no TECO
    IF lv_teco_found = abap_false.
      RETURN.
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 4.4: INTERFACE must be CMX
  "---------------------------------------------------
  SELECT SINGLE atwrt
    INTO lv_value
    FROM ausp
   WHERE objek = lv_obj
     AND atinn = gv_atinn.
  IF sy-subrc <> 0 OR lv_value <> 'CMX'.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 5: Change detection (CDHDR + CMXS logic)
  "---------------------------------------------------
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.

  SELECT MAX( udate ) MAX( utime )
    INTO (lv_date, lv_time)
    FROM cdhdr
   WHERE objectclas = 'ORDER'
     AND objectid    = lv_objid.

  IF ( lv_date < so_date-low OR
       ( lv_date = so_date-low AND lv_time < so_time-low ) ).

    " Check if CMXS (E0014) already set
    SELECT SINGLE stat
      INTO lv_stat
      FROM jest
     WHERE objnr = ps_order-objnr
       AND stat  = 'E0014' " Sent to CMX
       AND inact = ''.

    IF sy-subrc = 0.
      RETURN. " Already sent -> skip
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 4.5: Lock/Unlock handling (I0043)
  "---------------------------------------------------
  SELECT SINGLE inact
    INTO lv_inact
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat  = 'I0043'. " Locked
  IF sy-subrc = 0.
    IF lv_inact IS INITIAL.
      lv_stat = 'I0043'. " Locked
    ELSE.
      lv_stat = 'I0002'. " Unlocked -> treat as Released
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 7: Get first valid operation
  "---------------------------------------------------
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.

  "---------------------------------------------------
  " Prepare output
  "---------------------------------------------------
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.