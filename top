*&---------------------------------------------------------------------*
*& Include          ZIN_CMX_WORKORDER_F01
*&---------------------------------------------------------------------*

*---------------------------------------------------------------------*
* Fetch candidate orders (FS Step 2)
*---------------------------------------------------------------------*
FORM f_get_orders.

  "1. Find INTERFACE characteristic
  SELECT SINGLE atinn
    INTO gv_atinn
    FROM cabn
   WHERE atnam = 'INTERFACE'.

  IF sy-subrc <> 0.
    MESSAGE 'Characteristic INTERFACE not found' TYPE 'E'.
  ENDIF.

  "2. Validate mandatory selection
  IF so_date-low IS INITIAL OR so_time-low IS INITIAL.
    MESSAGE 'Check from Date and Time are mandatory' TYPE 'E'.
  ENDIF.

  "3. Select candidate orders
  CLEAR gt_orders.
  SELECT *
    FROM viaufkst
    INTO TABLE gt_orders
   WHERE auart IN @so_auart
     AND iwerk IN @so_werks
     AND aufnr IN @so_aufnr
     AND ( idat1 IS NOT INITIAL
        OR idat2 >= @so_date-low ).

  IF gt_orders IS INITIAL.
    RETURN.
  ENDIF.

  "4. Prefetch supporting data
  PERFORM f_prefetch_data.

  "5. Loop through candidates
  LOOP AT gt_orders INTO gs_order.
    PERFORM f_check_status USING gs_order.
  ENDLOOP.

ENDFORM.

*---------------------------------------------------------------------*
* Prefetch data (avoid SELECT SINGLE in loop)
*---------------------------------------------------------------------*
FORM f_prefetch_data.

  CLEAR: gt_inob, gt_ausp, gt_jest, gt_cdhdr.

  "INOB: classification objects
  SELECT objek cuobj
    FROM inob
    FOR ALL ENTRIES IN @gt_orders
    WHERE objek = @gt_orders-equnr
       OR objek = @gt_orders-tplnr
    INTO TABLE @gt_inob.
  SORT gt_inob BY objek.

  "AUSP: INTERFACE = CMX
  SELECT objek, atwrt
    FROM ausp
    FOR ALL ENTRIES IN @gt_inob
    WHERE objek = @gt_inob-cuobj
      AND atinn = @gv_atinn
    INTO TABLE @gt_ausp.
  SORT gt_ausp BY objek.

  "JEST: statuses of interest
  SELECT objnr, stat, inact
    FROM jest
    FOR ALL ENTRIES IN @gt_orders
    WHERE objnr = @gt_orders-objnr
      AND stat IN ( @c_stat_rel, @c_stat_teco, @c_stat_lkd,
                    @c_stat_cmxc, @c_stat_cmxs, 'I0013' )
    INTO TABLE @gt_jest.
  SORT gt_jest BY objnr stat.

  "CDHDR: latest change per order
  DATA lt_objid TYPE TABLE OF cdhdr-objectid.
  LOOP AT gt_orders INTO DATA(ls_order).
    DATA(lv_objid) = |{ sy-mandt }30{ ls_order-aufnr }|.
    APPEND lv_objid TO lt_objid.
  ENDLOOP.

  SELECT objectid udate utime
    FROM cdhdr
    FOR ALL ENTRIES IN @lt_objid
    WHERE objectclas = 'ORDER'
      AND objectid    = @lt_objid
    INTO TABLE @DATA(lt_cdhdr_raw).

  "Keep only latest udate/utime per objectid
  SORT lt_cdhdr_raw BY objectid udate DESCENDING utime DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_cdhdr_raw COMPARING objectid.

  gt_cdhdr = CORRESPONDING #( lt_cdhdr_raw ).

  SORT gt_cdhdr BY objectid.

ENDFORM.

*---------------------------------------------------------------------*
* Check order statuses and eligibility (FS Step 3–5)
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj   TYPE cuobj,
        lv_value TYPE atwrt,
        lv_stat  TYPE jest-stat,
        lv_date  TYPE udate,
        lv_time  TYPE utime,
        lv_vornr TYPE vornr.

  "Classification object
  READ TABLE gt_inob INTO DATA(ls_inob)
       WITH KEY objek = COND #( WHEN ps_order-equnr IS NOT INITIAL
                                 THEN ps_order-equnr
                                 ELSE ps_order-tplnr ).
  IF sy-subrc <> 0. RETURN. ENDIF.
  lv_obj = ls_inob-cuobj.

  "INTERFACE must be CMX
  READ TABLE gt_ausp INTO DATA(ls_ausp) WITH KEY objek = lv_obj.
  IF sy-subrc <> 0 OR ls_ausp-atwrt <> 'CMX'. RETURN. ENDIF.

  "Check status (REL / TECO / LKD)
  READ TABLE gt_jest INTO DATA(ls_jest)
       WITH KEY objnr = ps_order-objnr
                stat  = c_stat_rel
                inact = ''.
  IF sy-subrc = 0.
    lv_stat = c_stat_rel.
  ELSE.
    READ TABLE gt_jest INTO ls_jest
         WITH KEY objnr = ps_order-objnr
                  stat  = c_stat_teco
                  inact = ''.
    IF sy-subrc = 0.
      lv_stat = c_stat_teco.
    ELSE.
      READ TABLE gt_jest INTO ls_jest
           WITH KEY objnr = ps_order-objnr
                    stat  = c_stat_lkd.
      IF sy-subrc = 0.
        IF ls_jest-inact IS INITIAL.
          lv_stat = c_stat_lkd. "Locked
        ELSE.
          lv_stat = c_stat_rel. "Unlocked → treat as Released
        ENDIF.
      ELSE.
        RETURN.
      ENDIF.
    ENDIF.
  ENDIF.

  "Skip if CMXC
  READ TABLE gt_jest TRANSPORTING NO FIELDS
       WITH KEY objnr = ps_order-objnr
                stat  = c_stat_cmxc
                inact = ''.
  IF sy-subrc = 0. RETURN. ENDIF.

  "Change detection
  DATA(lv_objid) = |{ sy-mandt }30{ ps_order-aufnr }|.
  READ TABLE gt_cdhdr INTO DATA(ls_cdhdr) WITH KEY objectid = lv_objid.
  IF sy-subrc = 0.
    lv_date = ls_cdhdr-udate.
    lv_time = ls_cdhdr-utime.
  ENDIF.

  IF ( lv_date < so_date-low OR
       ( lv_date = so_date-low AND lv_time < so_time-low ) ).
    "Skip if already CMXS
    READ TABLE gt_jest TRANSPORTING NO FIELDS
         WITH KEY objnr = ps_order-objnr
                  stat  = c_stat_cmxs
                  inact = ''.
    IF sy-subrc = 0. RETURN. ENDIF.
  ENDIF.

  "Get first valid operation
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.
  IF lv_vornr IS INITIAL. RETURN. ENDIF.

  "Prepare output
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.

*---------------------------------------------------------------------*
* Get first valid operation (FS Step 7)
*---------------------------------------------------------------------*
FORM f_get_operation USING ps_order TYPE viaufkst
                     CHANGING pv_vornr TYPE afvc-vornr.

  CLEAR pv_vornr.

  SELECT vornr, aufpl, aplzl, objnr
    FROM afvc
    WHERE aufpl = @ps_order-aufpl
    ORDER BY aplzl
    INTO TABLE @DATA(lt_afvc).

  LOOP AT lt_afvc INTO DATA(ls_afvc).
    READ TABLE gt_jest TRANSPORTING NO FIELDS
         WITH KEY objnr = ls_afvc-objnr
                  stat  = 'I0013'
                  inact = ''.
    IF sy-subrc <> 0.
      pv_vornr = ls_afvc-vornr.
      EXIT. "First valid op found
    ENDIF.
  ENDLOOP.

ENDFORM.

*---------------------------------------------------------------------*
* Prepare output (FS Step 6)
*---------------------------------------------------------------------*
FORM f_prepare_output USING ps_order TYPE viaufkst
                            pv_vornr TYPE vornr
                            pv_stat  TYPE jest-stat.

  CLEAR gs_output.
  gs_output-OrderMessageStatus        = 'CREATE'.
  gs_output-Plant                     = ps_order-iwerk.
  gs_output-MaintenanceOrder          = ps_order-aufnr.
  gs_output-MaintenanceOrderOperation = pv_vornr.
  gs_output-MaintOrdBasicStartDate    = ps_order-gstrp.
  gs_output-MaintOrdBasicEndDate      = ps_order-gltrp.
  gs_output-LatestAcceptableComplDate = ps_order-lacd_date.
  gs_output-SystemId                  = sy-sysid.

  CASE pv_stat.
    WHEN c_stat_rel.
      SELECT SINGLE txt04 INTO gs_output-SystemStatusText
        FROM tj02t
       WHERE istat = @c_stat_rel
         AND spras = 'E'.
    WHEN c_stat_teco.
      SELECT SINGLE txt04 INTO gs_output-SystemStatusText
        FROM tj02t
       WHERE istat = @c_stat_teco
         AND spras = 'E'.
    WHEN c_stat_lkd.
      SELECT SINGLE txt04 INTO gs_output-SystemStatusText
        FROM tj02t
       WHERE istat = @c_stat_lkd
         AND spras = 'E'.
    WHEN OTHERS.
      CLEAR gs_output-SystemStatusText.
  ENDCASE.

  IF ps_order-equnr IS NOT INITIAL.
    gs_output-TechnicalObject = ps_order-equnr.
  ELSE.
    gs_output-TechnicalObject = ps_order-tplnr.
  ENDIF.

  APPEND gs_output TO gt_output.

ENDFORM.