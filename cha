*---------------------------------------------------------------------*
* FORM f_check_status – FINAL version (D30 / Client 100)
* Handles Case 1–4 from funct.pdf
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj           TYPE cuobj,
        lv_value         TYPE atwrt,
        lv_stat          TYPE jest-stat,
        lv_date          TYPE udate,
        lv_time          TYPE utime,
        lv_objid         TYPE c LENGTH 20,
        lv_inact         TYPE jest-inact,
        lv_vornr         TYPE vornr,
        lv_rel_active    TYPE abap_bool VALUE abap_false,
        lv_teco_active   TYPE abap_bool VALUE abap_false,
        lv_cmx_active    TYPE abap_bool VALUE abap_false,
        lv_cmxs_active   TYPE abap_bool VALUE abap_false,
        lv_locked_active TYPE abap_bool VALUE abap_false,
        lv_cmxs_date     TYPE udate,
        lv_cmxs_time     TYPE utime.

  "---------------------------------------------------
  " Step 1: Classification object (equipment/funct. loc.)
  "---------------------------------------------------
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-tplnr.
  ENDIF.

  IF lv_obj IS INITIAL.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 2: Check REL / TECO
  "---------------------------------------------------
  SELECT SINGLE stat FROM jest INTO @lv_stat
   WHERE objnr = @ps_order-objnr AND stat = 'I0002' AND inact = ''.
  IF sy-subrc = 0. lv_rel_active = abap_true. ENDIF.

  SELECT SINGLE stat FROM jest INTO @lv_stat
   WHERE objnr = @ps_order-objnr AND stat = 'I0045' AND inact = ''.
  IF sy-subrc = 0. lv_teco_active = abap_true. ENDIF.

  IF lv_rel_active = abap_false AND lv_teco_active = abap_false.
    RETURN. " Not released or TECO → skip
  ENDIF.

  "---------------------------------------------------
  " Step 3: Check CMXC (Confirmed)
  "---------------------------------------------------
  SELECT SINGLE inact FROM jest INTO @lv_inact
   WHERE objnr = @ps_order-objnr AND stat = 'E0010'.
  IF sy-subrc = 0 AND lv_inact IS INITIAL.
    lv_cmx_active = abap_true.
  ENDIF.

  IF lv_cmx_active = abap_true AND lv_teco_active = abap_false.
    RETURN. " CMXC active but not TECO → skip
  ENDIF.

  "---------------------------------------------------
  " Step 4: Interface type must be CMX
  "---------------------------------------------------
  SELECT SINGLE atwrt INTO @lv_value
    FROM ausp
   WHERE objek = @lv_obj AND atinn = @gv_atinn.
  IF sy-subrc <> 0 OR lv_value <> 'CMX'.
    RETURN. " Not a CMX order
  ENDIF.

  "---------------------------------------------------
  " Step 5: Detect CMXS (Sent to CMX)
  "---------------------------------------------------
  SELECT SINGLE stat FROM jest INTO @lv_stat
   WHERE objnr = @ps_order-objnr AND stat = 'E0014' AND inact = ''.
  IF sy-subrc = 0.
    lv_cmxs_active = abap_true.
    CONCATENATE sy-mandt '3' ps_order-aufnr INTO lv_objid.
    SELECT MAX( udate ) AS max_date, MAX( utime ) AS max_time
      INTO ( @lv_cmxs_date, @lv_cmxs_time )
      FROM cdhdr
     WHERE objectclas = 'ORDER' AND objectid = @lv_objid.
  ENDIF.

  "---------------------------------------------------
  " Step 6: Get latest order change timestamp
  "---------------------------------------------------
  CONCATENATE sy-mandt '3' ps_order-aufnr INTO lv_objid.
  SELECT MAX( udate ) AS max_date, MAX( utime ) AS max_time
    INTO ( @lv_date, @lv_time )
    FROM cdhdr
   WHERE objectclas = 'ORDER' AND objectid = @lv_objid.

  "---------------------------------------------------
  " Step 7: Check lock status (I0043)
  "---------------------------------------------------
  SELECT SINGLE inact FROM jest INTO @lv_inact
   WHERE objnr = @ps_order-objnr AND stat = 'I0043'.
  IF sy-subrc = 0.
    IF lv_inact IS INITIAL.
      lv_locked_active = abap_true.  " Locked
    ELSE.
      lv_locked_active = abap_false. " Unlocked
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 8: Improved timestamp & unlock logic
  "---------------------------------------------------
  IF lv_cmxs_active = abap_true.
    " Always include if unlocked or header changed after CMXS
    IF lv_locked_active = abap_false.
      " Continue (unlock should resend as REL)
    ELSEIF ( lv_date IS INITIAL
          OR lv_date < lv_cmxs_date
          OR ( lv_date = lv_cmxs_date AND lv_time <= lv_cmxs_time ) ).
      RETURN. " No newer change and still locked
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 9: Skip locked before CMXS
  "---------------------------------------------------
  IF lv_locked_active = abap_true AND lv_cmxs_active = abap_false.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 10: Get first valid operation
  "---------------------------------------------------
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.

  "---------------------------------------------------
  " Step 11: Control ALV visibility
  "---------------------------------------------------
  IF lv_teco_active = abap_false AND lv_locked_active = abap_false
     AND lv_cmxs_active = abap_true.
    " Changed REL with CMXS still shows now (fixed)
    " Do not return here anymore for unlock/change
  ENDIF.

  "---------------------------------------------------
  " Step 12: Prepare output
  "---------------------------------------------------
  IF lv_locked_active = abap_true.
    lv_stat = 'I0043'. " Locked
  ELSEIF lv_teco_active = abap_true.
    lv_stat = 'I0045'. " TECO
  ELSE.
    lv_stat = 'I0002'. " REL
  ENDIF.

  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.