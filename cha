*---------------------------------------------------------------------*
* END-OF-SELECTION
*---------------------------------------------------------------------*
END-OF-SELECTION.

  IF gt_output IS INITIAL.
    WRITE: / 'No matching orders found.'.
    EXIT.
  ENDIF.

  "-------------------------------------------
  " Run sending or simulation
  "-------------------------------------------
  IF p_test IS INITIAL.
    PERFORM f_send_cmx.     " Live mode (includes CMXS updates)
    PERFORM f_send_to_cpi.  " Send JSON payload to CPI
  ELSE.
    PERFORM f_send_cmx.     " Test mode (simulated sends only)
  ENDIF.

  "-------------------------------------------
  " Show only relevant output in ALV
  "-------------------------------------------
  DATA: lt_sent TYPE TABLE OF ty_output.

  LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<ls_row>).
    IF <ls_row>-msg CS 'sent'
    OR <ls_row>-msg CS 'CPI success'
    OR <ls_row>-msg CS 'CPI error'
    OR <ls_row>-msg CS 'Locked'
    OR <ls_row>-msg CS 'Unlocked'
    OR <ls_row>-msg CS '[Test Mode]'.
      APPEND <ls_row> TO lt_sent.
    ENDIF.
  ENDLOOP.

  gt_output = lt_sent.

  IF gt_output IS INITIAL.
    WRITE: / 'No orders were sent to CMX.'.
  ELSE.
    PERFORM f_display.
  ENDIF.



*---------------------------------------------------------------------*
* Update SAP status (CMXS) and simulate/send to CPI
*---------------------------------------------------------------------*
FORM f_send_cmx.

  DATA lv_mode TYPE char10.

  IF p_test = abap_true.
    lv_mode = 'TEST'.
  ELSE.
    lv_mode = 'LIVE'.
  ENDIF.

  LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<ls_output_row>).

    "---------------------------------------------------
    " Determine if order already has CMXS
    "---------------------------------------------------
    DATA(lv_already_sent) = abap_false.

    SELECT SINGLE stat
      FROM jest
      WHERE objnr = ( SELECT objnr FROM aufk WHERE aufnr = @<ls_output_row>-MaintenanceOrder )
        AND stat  = 'E0014'    " CMXS
        AND inact = ''
      INTO @DATA(lv_dummy).

    IF sy-subrc = 0.
      lv_already_sent = abap_true.
    ENDIF.

    "---------------------------------------------------
    " Skip rules:
    " 1. Locked but never sent -> skip
    " 2. TECO but already sent -> skip
    "---------------------------------------------------
    IF ( <ls_output_row>-SystemStatusText = 'LOCKED' AND lv_already_sent = abap_false )
     OR ( <ls_output_row>-SystemStatusText = 'TECO'   AND lv_already_sent = abap_true ).
      <ls_output_row>-msg = |Skipped: { <ls_output_row>-SystemStatusText } order|.
      PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                                 <ls_output_row>-MaintenanceOrderOperation
                                 <ls_output_row>-Plant
                                 'CMXS'
                                 <ls_output_row>-msg.
      CONTINUE.
    ENDIF.

    "---------------------------------------------------
    " TEST mode → simulate without actual BAPI call
    "---------------------------------------------------
    IF lv_mode = 'TEST'.
      <ls_output_row>-msg = |[Test Mode] Would send CMXS to CPI for order { <ls_output_row>-MaintenanceOrder } ({ <ls_output_row>-SystemStatusText })|.
      PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                                 <ls_output_row>-MaintenanceOrderOperation
                                 <ls_output_row>-Plant
                                 'CMXS'
                                 <ls_output_row>-msg.
      CONTINUE.
    ENDIF.

    "---------------------------------------------------
    " LIVE mode → perform actual update via BAPI
    "---------------------------------------------------
    DATA: lt_header  TYPE TABLE OF bapi_alm_order_headers_i,
          lt_status  TYPE TABLE OF bapi_alm_order_usrstat,
          lt_methods TYPE TABLE OF bapi_alm_order_method,
          lt_return  TYPE TABLE OF bapiret2,
          ls_return  TYPE bapiret2.

    CLEAR: lt_header, lt_status, lt_methods, lt_return.

    " Header
    APPEND VALUE #( orderid = <ls_output_row>-MaintenanceOrder ) TO lt_header.

    " User Status: always set CMXS (send marker)
    APPEND VALUE #( user_st_text = 'CMXS' langu = sy-langu ) TO lt_status.

    " BAPI methods
    APPEND VALUE #( refnumber = '00001'
                    objecttype = 'HEADER'
                    method = 'CHANGE'
                    objectkey = <ls_output_row>-MaintenanceOrder ) TO lt_methods.
    APPEND VALUE #( refnumber = '00001'
                    objecttype = 'USERSTATUS'
                    method = 'CHANGE'
                    objectkey = <ls_output_row>-MaintenanceOrder ) TO lt_methods.
    APPEND VALUE #( refnumber = '00003'
                    objecttype = 'ORDER'
                    method = 'SAVE'
                    objectkey = <ls_output_row>-MaintenanceOrder ) TO lt_methods.

    " Call BAPI
    CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
      TABLES
        it_header     = lt_header
        it_methods    = lt_methods
        it_userstatus = lt_status
        return        = lt_return.

    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF sy-subrc = 0.
      <ls_output_row>-msg = ls_return-message(72).
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ELSE.
      <ls_output_row>-msg = 'Sent to CMX (CMXS set)'.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.

    PERFORM f_write_log USING <ls_output_row>-MaintenanceOrder
                               <ls_output_row>-MaintenanceOrderOperation
                               <ls_output_row>-Plant
                               'CMXS'
                               <ls_output_row>-msg.

  ENDLOOP.

  COMMIT WORK.

ENDFORM.



*---------------------------------------------------------------------*
* Check status (REL / TECO / LOCKED / CMXS)
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj   TYPE cuobj,
        lv_value TYPE atwrt,
        lv_stat  TYPE jest-stat,
        lv_date  TYPE udate,
        lv_time  TYPE utime,
        lv_objid TYPE c LENGTH 20,
        lv_inact TYPE jest-inact,
        lv_vornr TYPE vornr.

  "---------------------------------------------------
  " Determine classification object
  "---------------------------------------------------
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-tplnr.
  ENDIF.
  IF lv_obj IS INITIAL.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Check REL / TECO status
  "---------------------------------------------------
  SELECT SINGLE stat
    INTO @lv_stat
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat IN ('I0002','I0045')   " REL or TECO
     AND inact = ''.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Skip REL orders already CMXS (no change since)
  "---------------------------------------------------
  DATA(lv_cmxs_active) = abap_false.

  SELECT SINGLE stat
    INTO @lv_stat
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat  = 'E0014'   " CMXS active
     AND inact = ''.

  IF sy-subrc = 0.
    lv_cmxs_active = abap_true.
  ENDIF.

  " Get last change date/time (CDHDR)
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.
  SELECT MAX( udate ) AS max_date,
         MAX( utime ) AS max_time
    INTO ( @lv_date, @lv_time )
    FROM cdhdr
   WHERE objectclas = 'ORDER'
     AND objectid    = @lv_objid.

  IF lv_cmxs_active = abap_true
     AND ( lv_date < so_date-low
        OR ( lv_date = so_date-low AND lv_time <= so_time-low ) ).
    RETURN. " Skip old REL + CMXS
  ENDIF.

  "---------------------------------------------------
  " Check INTERFACE = CMX
  "---------------------------------------------------
  SELECT SINGLE atwrt
    INTO @lv_value
    FROM ausp
   WHERE objek = @lv_obj
     AND atinn = @gv_atinn.

  IF sy-subrc <> 0 OR lv_value <> 'CMX'.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Lock/Unlock handling
  "---------------------------------------------------
  SELECT SINGLE inact
    INTO @lv_inact
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat  = 'I0043'. " Locked

  IF sy-subrc = 0.
    IF lv_inact IS INITIAL.
      lv_stat = 'I0043'. " Active lock
    ELSE.
      lv_stat = 'I0002'. " Unlock back to REL
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Determine operation and prepare output
  "---------------------------------------------------
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.