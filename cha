*---------------------------------------------------------------------*
* Release locks for an order (safe + logged) â€“ D30 compatible version
*---------------------------------------------------------------------*
FORM f_release_order_locks USING ps_order TYPE viaufkst.

  DATA: lv_fm_used TYPE funcname VALUE space,
        lt_fms     TYPE TABLE OF funcname,
        lv_fm      TYPE funcname,
        lv_found   TYPE abap_bool VALUE abap_false,
        lv_exists  TYPE funcname,
        lv_msg     TYPE char100.

  " List of possible DEQUEUE function modules available in system
  lt_fms = VALUE #( ( 'DEQUEUE_EAUFK' )   " Maintenance Order
                    ( 'DEQUEUE_EAFKO' )   " Order Header
                    ( 'DEQUEUE_EAFVC' )   " Operation
                    ( 'DEQUEUE_EEQUI' )   " Equipment
                    ( 'DEQUEUE_EIFLOT' )  " Functional Location
                  ).

  LOOP AT lt_fms INTO lv_fm.

    " Check if the function module exists
    SELECT SINGLE funcname INTO lv_exists
      FROM tfdir
      WHERE funcname = lv_fm.

    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.

    " Try to execute it safely
    TRY.
        CASE lv_fm.
          WHEN 'DEQUEUE_EAUFK' OR 'DEQUEUE_EAFKO'.
            CALL FUNCTION lv_fm
              EXPORTING
                aufnr = ps_order-aufnr.

          WHEN 'DEQUEUE_EAFVC'.
            CALL FUNCTION lv_fm
              EXPORTING
                objnr = ps_order-objnr.

          WHEN 'DEQUEUE_EEQUI'.
            IF ps_order-equnr IS NOT INITIAL.
              CALL FUNCTION lv_fm
                EXPORTING
                  equnr = ps_order-equnr.
            ENDIF.

          WHEN 'DEQUEUE_EIFLOT'.
            IF ps_order-tplnr IS NOT INITIAL.
              CALL FUNCTION lv_fm
                EXPORTING
                  tplnr = ps_order-tplnr.
            ENDIF.
        ENDCASE.

        lv_found = abap_true.
        lv_fm_used = lv_fm.
        EXIT.

      CATCH cx_root INTO DATA(lx_root).
        " Continue to next FM if call fails
        CONTINUE.
    ENDTRY.

  ENDLOOP.

  " If no specific function module found, fallback to DEQUEUE_ALL
  IF lv_found = abap_false.
    CALL FUNCTION 'DEQUEUE_ALL'.
    lv_fm_used = 'DEQUEUE_ALL'.
  ENDIF.

  " Prepare log message (avoid string templates for compatibility)
  CONCATENATE 'Lock released using' lv_fm_used INTO lv_msg SEPARATED BY space.

  " Write log entry
  PERFORM f_write_log USING ps_order-aufnr
                            ''          " no operation number
                            ps_order-iwerk
                            'DEQUEUE'
                            lv_msg.

ENDFORM.