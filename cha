*&---------------------------------------------------------------------*
*& Include          ZIN_CMX_WORKORDER_F01
*&---------------------------------------------------------------------*

*---------------------------------------------------------------------*
* Fetch candidate orders
*---------------------------------------------------------------------*
FORM f_get_orders.
  LOOP AT gt_orders INTO gs_order.
    PERFORM f_check_status USING gs_order.
  ENDLOOP.

  SELECT SINGLE atinn INTO gv_atinn
    FROM cabn
   WHERE atnam = 'INTERFACE'.
  IF sy-subrc <> 0.
    MESSAGE 'Characteristic INTERFACE not found' TYPE 'E'.
  ENDIF.

  IF so_date-low IS INITIAL OR so_time-low IS INITIAL.
    MESSAGE 'Check from Date and Time are mandatory' TYPE 'E'.
  ENDIF.

  " Eligible orders (per spec: IDAT1 not blank OR IDAT2 >= check date)
  SELECT *
    FROM viaufkst
   WHERE auart IN so_auart
     AND iwerk IN so_werks
     AND aufnr IN so_aufnr
     AND ( idat1 IS NOT INITIAL OR idat2 >= so_date-low )
   INTO TABLE gt_orders.
ENDFORM.

*---------------------------------------------------------------------*
* Check order statuses and eligibility
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_obj   TYPE cuobj,
        lv_value TYPE atwrt,
        lv_stat  TYPE jest-stat,
        lv_date  TYPE udate,
        lv_time  TYPE utime,
        lv_objid TYPE c LENGTH 20,
        lv_inact TYPE jest-inact,
        lv_vornr TYPE vornr.

  " Classification object (equipment or functional location)
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO lv_obj FROM inob WHERE objek = ps_order-tplnr.
  ENDIF.
  IF lv_obj IS INITIAL. RETURN. ENDIF.

  "---------------------------------------------------
  " Step 4.1: Status check (REL or TECO required)
  "---------------------------------------------------
  SELECT SINGLE stat
    INTO lv_stat
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat IN ('I0002', 'I0045') " REL, TECO
     AND inact = ''.
  IF sy-subrc <> 0.
    RETURN. " Not valid
  ENDIF.

  "---------------------------------------------------
  " Step 4.2/4.3: Skip if CMXC (E0010) active
  "---------------------------------------------------
  SELECT SINGLE inact
    INTO lv_inact
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat  = 'E0010'. " CMXC confirmed
  IF sy-subrc = 0 AND lv_inact IS INITIAL.
    RETURN. " Skip, CMXC still active
  ENDIF.

  "---------------------------------------------------
  " Step 4.5: INTERFACE must be CMX
  "---------------------------------------------------
  SELECT SINGLE atwrt
    INTO lv_value
    FROM ausp
   WHERE objek = lv_obj
     AND atinn = gv_atinn.
  IF sy-subrc <> 0 OR lv_value <> 'CMX'.
    RETURN.
  ENDIF.

  "---------------------------------------------------
  " Step 5: Change detection (CDHDR + CMXS logic)
  "---------------------------------------------------
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.

  SELECT MAX( udate ) MAX( utime )
    INTO (lv_date, lv_time)
    FROM cdhdr
   WHERE objectclas = 'ORDER'
     AND objectid    = lv_objid.

  IF ( lv_date < so_date-low OR
       ( lv_date = so_date-low AND lv_time < so_time-low ) ).

    " Check if CMXS (E0014) already set
    SELECT SINGLE stat
      INTO lv_stat
      FROM jest
     WHERE objnr = ps_order-objnr
       AND stat  = 'E0014' " Sent to CMX
       AND inact = ''.

    IF sy-subrc = 0.
      RETURN. " Already sent -> skip
    ENDIF.
    " If not found -> never sent before, so continue
  ENDIF.

  "---------------------------------------------------
  " Step 4.4: Lock/Unlock handling (I0043)
  "---------------------------------------------------
  SELECT SINGLE inact
    INTO lv_inact
    FROM jest
   WHERE objnr = ps_order-objnr
     AND stat  = 'I0043'. " Locked
  IF sy-subrc = 0.
    IF lv_inact IS INITIAL.
      lv_stat = 'I0043'. " Locked
    ELSE.
      lv_stat = 'I0002'. " Unlocked -> treat as Released
    ENDIF.
  ENDIF.

  "---------------------------------------------------
  " Step 7: Get first valid operation
  "---------------------------------------------------
  PERFORM f_get_operation USING ps_order CHANGING lv_vornr.

  "---------------------------------------------------
  " Prepare output
  "---------------------------------------------------
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.

*---------------------------------------------------------------------*
* Get first operation (skip deleted)
*---------------------------------------------------------------------*
FORM f_get_operation USING ps_order TYPE viaufkst
                     CHANGING pv_vornr TYPE afvc-vornr.

  DATA: lt_ops   TYPE TABLE OF viaufk_afvc,
        ls_op    TYPE viaufk_afvc,
        lv_objnr TYPE afvc-objnr,
        lv_stat  TYPE jest-stat.

  " Select operations for this order
  SELECT vornr aufpl aplzl
    FROM viaufk_afvc
   WHERE aufnr = @ps_order-aufnr
   ORDER BY aplzl
   INTO TABLE @lt_ops.

  LOOP AT lt_ops INTO ls_op.

    " Get AFVC objnr
    SELECT SINGLE objnr
      FROM afvc
     WHERE aufpl = @ls_op-aufpl
       AND aplzl = @ls_op-aplzl
     INTO @lv_objnr.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.

    " Check deletion flag I0013
    SELECT SINGLE stat
      FROM jest
     WHERE objnr = @lv_objnr
       AND stat  = 'I0013'
       AND inact = ''
     INTO @lv_stat.
    IF sy-subrc = 0.
      CONTINUE. " Deleted -> try next
    ENDIF.

    " Found valid operation
    pv_vornr = ls_op-vornr.
    EXIT.
  ENDLOOP.

ENDFORM.

*---------------------------------------------------------------------*
* Prepare output
*---------------------------------------------------------------------*
FORM f_prepare_output USING ps_order TYPE viaufkst
                            pv_vornr TYPE vornr
                            pv_stat  TYPE jest-stat.

  CLEAR gs_output.
  gs_output-OrderMessageStatus        = 'CREATE'.
  gs_output-Plant                     = ps_order-iwerk.
  gs_output-MaintenanceOrder          = ps_order-aufnr.
  gs_output-MaintenanceOrderOperation = pv_vornr.
  gs_output-MaintOrdBasicStartDate    = ps_order-gstrp.
  gs_output-MaintOrdBasicEndDate      = ps_order-gltrp.
  gs_output-LatestAcceptableComplDate = ps_order-lacd_date.
  gs_output-SystemId                  = sy-sysid.

  " Resolve system status text
  SELECT SINGLE txt04 INTO gs_output-SystemStatusText
    FROM tj02t
   WHERE istat = pv_stat
     AND spras = 'E'.

  " Technical object
  IF ps_order-equnr IS NOT INITIAL.
    gs_output-TechnicalObject = ps_order-equnr.
  ELSE.
    gs_output-TechnicalObject = ps_order-tplnr.
  ENDIF.

  APPEND gs_output TO gt_output.

ENDFORM.