*---------------------------------------------------------------------*
* END-OF-SELECTION
*---------------------------------------------------------------------*
END-OF-SELECTION.

  IF gt_output IS INITIAL.
    WRITE: / 'No matching orders found.'.
    EXIT.
  ENDIF.

  IF p_test IS INITIAL.
    PERFORM f_send_cmx.     " LIVE mode
    PERFORM f_send_to_cpi.  " Send JSON payload
  ELSE.
    PERFORM f_send_cmx.     " TEST mode (simulate)
  ENDIF.

  " Show only relevant results
  DELETE gt_output WHERE msg IS INITIAL.
  DELETE gt_output WHERE msg CS 'Skipped' AND p_test IS INITIAL.

  IF gt_output IS INITIAL.
    WRITE: / 'No orders to display in ALV (nothing to send).'.
  ELSE.
    PERFORM f_display.
  ENDIF.



*---------------------------------------------------------------------*
* FORM f_send_cmx — Update CMXS or simulate in TEST mode
*---------------------------------------------------------------------*
FORM f_send_cmx.

  DATA(lv_mode) = COND string( WHEN p_test = abap_true THEN 'TEST' ELSE 'LIVE' ).

  LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<ls_row>).

    DATA(lv_already_sent) = abap_false.

    SELECT SINGLE stat
      FROM jest
      WHERE objnr = ( SELECT objnr FROM aufk WHERE aufnr = @<ls_row>-MaintenanceOrder )
        AND stat  = 'E0014'   " CMXS
        AND inact = ''
      INTO @DATA(lv_dummy).

    IF sy-subrc = 0.
      lv_already_sent = abap_true.
    ENDIF.

    "---------------------------------------------------
    " Skip: Locked never CMXS or TECO already CMXS
    "---------------------------------------------------
    IF ( <ls_row>-SystemStatusText = 'LOCKED' AND lv_already_sent = abap_false )
     OR ( <ls_row>-SystemStatusText = 'TECO' AND lv_already_sent = abap_true ).
      <ls_row>-msg = |Skipped: { <ls_row>-SystemStatusText } order { <ls_row>-MaintenanceOrder }|.
      PERFORM f_write_log USING <ls_row>-MaintenanceOrder
                                 <ls_row>-MaintenanceOrderOperation
                                 <ls_row>-Plant
                                 'CMXS'
                                 <ls_row>-msg.
      CONTINUE.
    ENDIF.

    "---------------------------------------------------
    " TEST mode — simulate send only
    "---------------------------------------------------
    IF lv_mode = 'TEST'.
      <ls_row>-msg = |[Test Mode] Would send CMXS for { <ls_row>-MaintenanceOrder } ({ <ls_row>-SystemStatusText })|.
      PERFORM f_write_log USING <ls_row>-MaintenanceOrder
                                 <ls_row>-MaintenanceOrderOperation
                                 <ls_row>-Plant
                                 'CMXS'
                                 <ls_row>-msg.
      CONTINUE.
    ENDIF.

    "---------------------------------------------------
    " LIVE mode — perform BAPI update
    "---------------------------------------------------
    DATA: lt_header  TYPE TABLE OF bapi_alm_order_headers_i,
          lt_status  TYPE TABLE OF bapi_alm_order_usrstat,
          lt_methods TYPE TABLE OF bapi_alm_order_method,
          lt_return  TYPE TABLE OF bapiret2,
          ls_return  TYPE bapiret2.

    CLEAR: lt_header, lt_status, lt_methods, lt_return.

    APPEND VALUE #( orderid = <ls_row>-MaintenanceOrder ) TO lt_header.
    APPEND VALUE #( user_st_text = 'CMXS' langu = sy-langu ) TO lt_status.

    APPEND VALUE #( refnumber = '00001' objecttype = 'HEADER'
                    method = 'CHANGE' objectkey = <ls_row>-MaintenanceOrder ) TO lt_methods.
    APPEND VALUE #( refnumber = '00001' objecttype = 'USERSTATUS'
                    method = 'CHANGE' objectkey = <ls_row>-MaintenanceOrder ) TO lt_methods.
    APPEND VALUE #( refnumber = '00003' objecttype = 'ORDER'
                    method = 'SAVE' objectkey = <ls_row>-MaintenanceOrder ) TO lt_methods.

    CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
      TABLES
        it_header     = lt_header
        it_methods    = lt_methods
        it_userstatus = lt_status
        return        = lt_return.

    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF sy-subrc = 0.
      <ls_row>-msg = ls_return-message(72).
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ELSE.
      <ls_row>-msg = 'Sent to CMX (CMXS set)'.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X'.
    ENDIF.

    PERFORM f_write_log USING <ls_row>-MaintenanceOrder
                               <ls_row>-MaintenanceOrderOperation
                               <ls_row>-Plant
                               'CMXS'
                               <ls_row>-msg.

  ENDLOOP.

  COMMIT WORK.

ENDFORM.



*---------------------------------------------------------------------*
* FORM f_check_status — Include only relevant orders
*---------------------------------------------------------------------*
FORM f_check_status USING ps_order TYPE viaufkst.

  DATA: lv_stat        TYPE jest-stat,
        lv_cmxs_active TYPE abap_bool,
        lv_cmxs_date   TYPE udate,
        lv_cmxs_time   TYPE utime,
        lv_lastchg_d   TYPE udate,
        lv_lastchg_t   TYPE utime,
        lv_objid       TYPE char20,
        lv_obj         TYPE cuobj,
        lv_value       TYPE atwrt.

  " Classification object
  IF ps_order-equnr IS NOT INITIAL.
    SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-equnr.
  ELSE.
    SELECT SINGLE cuobj INTO @lv_obj FROM inob WHERE objek = @ps_order-tplnr.
  ENDIF.
  IF lv_obj IS INITIAL. RETURN. ENDIF.

  " REL / TECO only
  SELECT SINGLE stat INTO @lv_stat
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat IN ('I0002','I0045')
     AND inact = ''.
  IF sy-subrc <> 0. RETURN. ENDIF.

  " CMXS status info
  lv_cmxs_active = abap_false.
  SELECT SINGLE stat, chg_date, chg_time
    INTO (@lv_stat, @lv_cmxs_date, @lv_cmxs_time)
    FROM jest
    WHERE objnr = @ps_order-objnr
      AND stat  = 'E0014'
      AND inact = ''.
  IF sy-subrc = 0. lv_cmxs_active = abap_true. ENDIF.

  " Last change
  CONCATENATE sy-mandt '30' ps_order-aufnr INTO lv_objid.
  SELECT MAX( udate ) AS max_date, MAX( utime ) AS max_time
    INTO ( @lv_lastchg_d, @lv_lastchg_t )
    FROM cdhdr
   WHERE objectclas = 'ORDER'
     AND objectid    = @lv_objid.

  " Skip REL + CMXS no new change
  IF lv_cmxs_active = abap_true
     AND ( lv_lastchg_d IS INITIAL
        OR lv_lastchg_d < lv_cmxs_date
        OR ( lv_lastchg_d = lv_cmxs_date AND lv_lastchg_t <= lv_cmxs_time ) ).
    RETURN.
  ENDIF.

  " INTERFACE must be CMX
  SELECT SINGLE atwrt INTO @lv_value
    FROM ausp
   WHERE objek = @lv_obj
     AND atinn = @gv_atinn.
  IF sy-subrc <> 0 OR lv_value <> 'CMX'. RETURN. ENDIF.

  " Lock/Unlock handling
  SELECT SINGLE inact INTO @DATA(lv_inact)
    FROM jest
   WHERE objnr = @ps_order-objnr
     AND stat  = 'I0043'.
  IF sy-subrc = 0.
    IF lv_inact IS INITIAL.
      lv_stat = 'I0043'. " Locked
    ELSE.
      lv_stat = 'I0002'. " Unlocked → REL
    ENDIF.
  ENDIF.

  PERFORM f_get_operation USING ps_order CHANGING DATA(lv_vornr).
  PERFORM f_prepare_output USING ps_order lv_vornr lv_stat.

ENDFORM.



*---------------------------------------------------------------------*
* FORM f_prepare_output — Build ALV output entry
*---------------------------------------------------------------------*
FORM f_prepare_output USING ps_order TYPE viaufkst
                            pv_vornr TYPE vornr
                            pv_stat  TYPE jest-stat.

  DATA(ls_out) = VALUE ty_output(
      OrderMessageStatus        = 'CREATE'
      Plant                     = ps_order-werks
      MaintenanceOrder           = ps_order-aufnr
      MaintenanceOrderOperation  = pv_vornr
      TechnicalObject            = ps_order-equnr
      SystemStatusText           = SWITCH #( pv_stat
                                             WHEN 'I0002' THEN 'REL'
                                             WHEN 'I0045' THEN 'TECO'
                                             WHEN 'I0043' THEN 'LOCKED'
                                             ELSE 'REL' )
      MaintOrdBasicStartDate     = ps_order-gstrp
      MaintOrdBasicEndDate       = ps_order-gltrp
      LatestAcceptableComplDate  = ps_order-gltlt
      SystemId                   = 'T30' ).

  APPEND ls_out TO gt_output.

ENDFORM.



*---------------------------------------------------------------------*
* FORM f_send_to_cpi — JSON payload via CPI
*---------------------------------------------------------------------*
FORM f_send_to_cpi.

  DATA: lv_payload TYPE string,
        lv_result  TYPE string.

  TRY.
      lv_payload = xco_ku_json=>data->from_abap( gt_output )
                    ->apply( VALUE #( ( xco_ku_json=>transformation->underscore_to_pascal_case ) ) )
                    ->to_string( ).

      CALL FUNCTION 'ZCPI_SEND_HTTP'
        EXPORTING
          iv_json = lv_payload
        IMPORTING
          ev_result = lv_result.

    CATCH cx_root INTO DATA(lx_err).
      WRITE: / 'CPI Error:', lx_err->get_text( ).
  ENDTRY.

ENDFORM.