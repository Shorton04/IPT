FUNCTION zlonza_alv_popup_table.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(IV_START_COL) TYPE  I DEFAULT 25
*"     REFERENCE(IV_START_LINE) TYPE  I DEFAULT 6
*"     REFERENCE(IV_END_COL) TYPE  I DEFAULT 100
*"     REFERENCE(IV_END_LINE) TYPE  I DEFAULT 10
*"     REFERENCE(IV_TITLE) TYPE  STRING DEFAULT 'ALV'
*"     REFERENCE(IT_FIELD_NAMES) TYPE  STANDARD TABLE OPTIONAL
*"  EXPORTING
*"     REFERENCE(EV_CHOICE) TYPE  FLAG
*"  CHANGING
*"     REFERENCE(IT_TABLE) TYPE  STANDARD TABLE OPTIONAL
*"----------------------------------------------------------------------

  DATA: lo_popup   TYPE REF TO cl_reca_gui_f4_popup,
        lt_names   TYPE STANDARD TABLE OF zzs_alv_popup_names,
        ls_names   TYPE zzs_alv_popup_names,
        lv_choice  TYPE flag,
        lt_result  TYPE REF TO data.       " temp result holder

  FIELD-SYMBOLS: <lt_result> TYPE STANDARD TABLE.

  " Safety check: table must not be initial
  IF it_table IS INITIAL.
    RETURN.
  ENDIF.

  " Create popup instance (same as before)
  CALL METHOD cl_reca_gui_f4_popup=>factory_grid
    EXPORTING
      it_f4value     = it_table
      if_multi       = abap_false
      id_title       = iv_title
    RECEIVING
      ro_f4_instance = lo_popup.

  CHECK lo_popup IS BOUND.

  " Map field names to popup fields
  MOVE-CORRESPONDING it_field_names TO lt_names.

  LOOP AT lt_names INTO ls_names.
    CALL METHOD lo_popup->set_field_text
      EXPORTING
        id_fieldname = ls_names-fieldname
        id_text      = ls_names-heading.
  ENDLOOP.

  " === Attempt to enable toolbar / OK button if supported by system ===
  " Use dynamic CALL METHOD so code compiles on releases where method is not public/doesn't exist.
  DATA(lv_method) = 'SET_OK_CODE_VISIBLE'.
  TRY.
      " try SET_OK_CODE_VISIBLE( if_visible = abap_true )
      CALL METHOD lo_popup->( lv_method )
        EXPORTING
          if_visible = abap_true.
    CATCH cx_sy_dyn_call_illegal_method INTO DATA(lx1).
      " method does not exist / not accessible -> try alternative method name
      lv_method = 'SET_TOOLBAR_VISIBLE'.
      TRY.
          CALL METHOD lo_popup->( lv_method )
            EXPORTING
              abap_true = abap_true. " dummy param name if required (will likely fail)
        CATCH cx_sy_dyn_call_illegal_method INTO DATA(lx2).
          " Both methods not available - ignore, continue with default popup behavior
        CATCH cx_sy_dyn_call_illegal_param INTO DATA(lx3).
          " parameter name mismatch - ignore
      ENDTRY.
    CATCH cx_sy_dyn_call_illegal_param INTO DATA(lx4).
      " parameter name mismatch - try alternative method name
      lv_method = 'SET_TOOLBAR_VISIBLE'.
      TRY.
          CALL METHOD lo_popup->( lv_method )
            EXPORTING
              if_visible = abap_true.
        CATCH cx_sy_dyn_call_illegal_method INTO DATA(lx5).
          " not available
        CATCH cx_sy_dyn_call_illegal_param INTO DATA(lx6).
          " not available
      ENDTRY.
  ENDTRY.
  " ===================================================================

  " Prepare temporary result table
  CREATE DATA lt_result LIKE it_table.
  ASSIGN lt_result->* TO <lt_result>.

  " Display popup
  CALL METHOD lo_popup->display
    EXPORTING
      id_start_column = iv_start_col
      id_start_line   = iv_start_line
      id_end_column   = iv_end_col
      id_end_line     = iv_end_line
    IMPORTING
      et_result       = <lt_result>
      ef_cancelled    = lv_choice.

  " Assign result back to changing table
  it_table = <lt_result>.
  ev_choice = lv_choice.

ENDFUNCTION.